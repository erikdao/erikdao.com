---
title: 'Secure Build-time Secrets in Docker and Docker Compose'
date: '2024-08-18'
tags: ['dev', 'docker', 'docker compose', 'secrets']
featured: true
summary: "Learn how to securely manage build-time secrets in Docker and Docker Compose using the `--secret` flag and the `DOCKER_BUILDKIT=1` environment variable."
socialImage: '/images/dev/20240605_iterm2_fb_img.png'
---

If you're building Docker images frequently in your work, it's likely that you've had to deal with sensitive information that you don't want to expose in your Dockerfiles. This could be API keys, passwords, or other secrets that you need to use during the build process.

During run-time, i.e., once Docker image is built, and a container is running, you can use Docker secrets to manage sensitive information. But what about build-time secrets? How can you securely pass sensitive information to your Docker build process without exposing it?

In this post, I'm gonna show you several ways to do so, from the less secure to the most secure. Let's get started!

## Passing secrets as build arguments

Docker provides the `ARG` instruction which allows you to pass arguments to your Dockerfile at build time.
```dockerfile
FROM alpine

ARG API_KEY
RUN echo "${API_KEY}"
```
When building the image, you can pass the `API_KEY` argument using the `--build-arg` flag.
```bash
export API_KEY="themostsecretvalueevercreated"
docker build --build-arg API_KEY="${API_KEY} -t test-secrets .
```
While it might sound straightforward, passing secrets via build arguments is not secure. When you run `docker build` you can see the secrets in the output in plain texts. Moreoever, the secrets are stored in the image history, which can be accessed by anyone who has access to the image using `docker history`. And this practice is recommended against, in Docker's official [documentation](https://docs.docker.com/reference/dockerfile/#arg).

## Mount the secret

```dockerfile
FROM alpine

RUN --mount=type=secret,id=API_KEY \
    echo "$(cat /run/secrets/API_KEY)"
```

```bash
export API_KEY="themostsecretvalueevercreated"
docker build --secret "id=API_KEY" -t test-secrets .
```

## How's about Docker Compose?
```dockerfile
FROM python:3.10-slim-bullseye

RUN apt-get update > /dev/null
RUN pip install keyring keyrings.google-cloud-auth
RUN --mount=type=secret,id=google_application_credentials \
    cat /run/secrets/google_application_credentials > /tmp/credentials.json && \
    GOOGLE_APPLICATION_CREDENTIALS=/tmp/redentials.json && \
    pip install --index-url https://europe-west4-python.pkg.dev/myproject/my-repository/simple my-python-package && \
    rm -f /tmp/credentials.json
```

```yaml
service:
    base:
    build:
        context: .
        dockerfile: Dockerfile
        secrets:
            - google_appilication_credentials
    command: echo "$(cat /run/secrets/API_KEY)"

secrets:
    google_appilication_credentials:
        file: ${HOME}/.gcloud/config/google_application_credentials.json
```